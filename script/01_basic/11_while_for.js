/**
 * 1. 반복문의 마지막 값
 * 아래 코드를 실행했을 때 얼럿 창에 마지막으로 뜨는 값은 무엇일까? 이유도 함께 설명해보자.
 */

// alert 창에 마지막으로 뜨는 값은 1이다.
// 뒤에 붙은 -- 는 후위증감연산자인데, 이 연산자는 i의 값을 출력할 때 기존값을 출력한 후에 -- 를 시킨다.
// 그래서 3을 출력한 후, -- 시키면 2 -> 2를 출력하고 -- 하면 1 -> 1을 출력하고 -- 하면 0이 되므로 반복문이 종료된다.
let i = 3;

while (i) {
  alert(i--);
}

/**
 * 2. while 반복문의 출력값 예상하기
 * while 반복문이 순차적으로 실행될 때마다 얼럿 창에 어떤 값이 출력될지 예상해보자.
 *
 * 아래 두 예시는 같은 값을 출력할까?
 */
// 전위형 증가 연산자를 사용한 경우(++i):
let i2 = 0;
while (++i2 < 5) alert(i2); // 1, 2, 3, 4 출력됨

// 후위형 증가 연산자를 사용한 경우(i++):
let i3 = 0;
while (i3++ < 5) alert(i3);

// 0 < 5 비교해 true 야. 그다음에 ++ 시켜서 1 출력
// ... 반복
// 4 < 5 일때, 비교해 true, 그다음에 ++ 시켜서 5 출력
// 따라서 1~5 출력

/**
 * 3. 'for' 반복문의 출력값 예상하기
 * for 반복문이 순차적으로 실행될 때마다 얼럿 창에 어떤 값이 출력될지 예상해보자.
 *
 * 아래 두 예시는 같은 값을 출력할까?
 */
// 후위형 증가 연산자를 사용한 경우(i++):
for (let i = 0; i < 5; i++) alert(i); // 0, 1, 2, 3, 4 출력

// 전위형 증가 연산자를 사용한 경우(++i):

for (let i = 0; i < 5; ++i) alert(i); // 0, 1, 2, 3, 4 출력

/**
 * 4. for 반복문을 이용하여 짝수 출력하기
 * for 반복문을 이용하여 2부터 10까지 숫자 중 짝수만을 출력해보자.
 */
for (let i = 2; i <= 10; i += 2) {
  alert(i);
}

// 나머지 연산자 이용하기
for (let i = 2; i <= 10; i++) {
  if (i % 2 == 0) alert(i);
}

/**
 * 5. 'for' 반복문을 'while' 반복문으로 바꾸기
 * for 반복문을 while 반복문으로 바꾸되, 동작 방식에는 변화가 없도록 해보자. 출력 결과도 동일해야 함.
 */
for (let i = 0; i < 3; i++) {
  alert(`number ${i}!`);
}

let i4 = 0;
while (14 < 3) {
  alert(`number ${i}!`);
  i++;
}

/**
 * 6. 사용자가 유효한 값을 입력할 때까지 프롬프트 창 띄우기
 *
 * 사용자가 100보다 큰 숫자를 입력하도록 안내하는 프롬프트 창을 띄워보자.
 * 사용자가 조건에 맞지 않은 값을 입력한 경우 반복문을 사용해 동일한 프롬프트 창을 띄워주기.
 *
 * 사용자가 100을 초과하는 숫자를 입력하거나 취소 버튼을 누른 경우, 혹은 아무것도 입력하지 않고 확인 버튼을 누른 경우엔 더는 프롬프트 창을 띄워주지 않아도 됨.
 *
 * 사용자가 오직 숫자만 입력한다고 가정하고 답안을 작성하도록 해보자. 숫자가 아닌 값이 입력되는 예외 상황은 처리하지 않아도 됨.
 */
let num;

do {
  num = prompt("100을 초과하는 숫자를 입력해주세요.", 0); // 프롬프트 창은 무조건 한 번 띄워야 하니까 do while 문 사용
} while (num <= 100 && num); // 조건을 확인 후, 조건에 맞지 않는 값을 입력하면 프롬프트를 무한으로 띄움

/**
 * 7, 소수 출력하기
 *
 * 소수(prime number)는 자신보다 작은 두 개의 자연수를 곱하여 만들 수 없는 1보다 큰 자연수이다.
 * 다시 말해서 1과 그 수 자신 이외의 자연수로는 나눌 수 없는 자연수를 소수라고 부른다.
 *
 * 5는 2나 3, 4로 나눌 수 없기 때문에 소수이다. 5를 이들 숫자로 나누면 나머지가 있기 때문이다.
 *
 * 2부터 n까지의 숫자 중 소수만 출력해주는 코드를 작성해보자.
 * n = 10이라면 결과는 2,3,5,7이 되어야 한다.
 *
 * 주의: 작성한 코드는 임의의 숫자 n에 대해 동작해야 한다.
 */
function solution(n) {
  nextPrime: for (let i = 2; i <= n; i++) {
    for (let j = 2; j < i; j++) {
      if (i % j === 0) continue nextPrime;
    }
    alert(i);
  }
}

const solution = (n) => {
  let answer = [];

  for (let i = 2; i <= n; i++) {
    let isPrime = true;

    for (let j = 2; j < i; j++) {
      if (i % j === 0) {
        isPrime = false;
        break;
      }
    }

    if (isPrime) {
      answer.push(i);
    }
  }

  return answer;
};
