// 1. 전위형과 후위형
// 아래 코드가 실행된 후, 변수 a, b, c, d엔 각각 어떤 값들이 저장될까?

let a = 1,
  b = 1;

let c = ++a; // a: 2, c: 2 -> 전위형은 증가시킨 값 즉, 새로운 값을 저장한다.
let d = b++; // b: 2, d: 1 -> 후위형은 증가시키기 전의 값 즉, 기존 값을 저장한다.

console.log("---------------------------------");

// 2. 할당 후 결과 예측하기
// 아래 코드가 실행되고 난 후, e와 x엔 각각 어떤 값이 저장될까?

let e = 2;

let x = 1 + (e *= 2); // e: 4, x: 5 -> 괄호안의 수식이 먼저 계산 됨

console.log("---------------------------------");

// 3. 형 변환
// 아래 표현식들의 결과를 예측하기
/**
 * 난 바보인가;;
 * 문자열은 더하기가 가능한거 알고있잖아 !!!!!! 왜 그러는고야 !!!!!!!!
 * 아무튼.. 문자열은 덧셈이 가능해서.. 다른 피연산자도 문자로 바꿔버리고 더해버림
 *
 * 그리고 마지막 문제는 /t /n 은 공백이라서 결국 빈 문자열이 된다고 함. (빈문자열 = 0)
 */

"" + 1 + 0; // 1 -> "10" (틀림) -> 바보
"" - 1 + 0; // -1
true + false; // 1
6 / "3"; // 2
"2" * "3"; // 6
4 + 5 + "px"; // NaN -> "9px" (틀림) -> 바보
"$" + 4 + 5; // NaN -> "$45" (틀림) -> 바보
"4" - 2; // 2
"4px" - 2; // NaN
7 / 0; // Infinity
"  -9  " + 5; // -4 -> "  -9   5" (틀림) -> 바보
"  -9  " - 5; // -14
null + 1; // 1
undefined + 1; // NaN
" \t \n" - 2; // NaN -> -2 (틀림)

console.log("---------------------------------");

// 4. 덧셈 고치기
// 아래 코드는 사용자에게 숫자 2개를 입력받은 다음 그 합을 보여준다.
// 그런데 의도한 대로 예시가 동작하지 않는다. 프롬프트 창에 세팅한 기본값을 수정하지 않은 경우 덧셈의 결과는 12가 된다.
// 왜 그럴까? 예시가 제대로 동작하도록 코드를 수정해 보기. 결과는 3이 되어야 한다.

let z = prompt("덧셈할 첫 번째 숫자를 입력해주세요.", 1);
let v = prompt("덧셈할 두 번째 숫자를 입력해주세요.", 2);

alert(Number(z) + Number(v)); // 3 -> prompt 의 입력값은 문자열 형태로 반환되기 때문에 숫자형으로 변환 후, 더해줘야 원하는 값을 구할 수 있다.
